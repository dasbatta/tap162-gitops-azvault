apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: wiz-scanner-template
spec:
  imagePath: .status.scannedImage
  retentionPolicy:
    maxFailedRuns: 10
    maxSuccessfulRuns: 10
  lifecycle: immutable

  healthRule:
    multiMatch:
      healthy:
        matchConditions:
          - status: "True"
            type: ScanCompleted
          - status: "True"
            type: Succeeded
      unhealthy:
        matchConditions:
          - status: "False"
            type: ScanCompleted
          - status: "False"
            type: Succeeded

  params:
    - name: image_scanning_workspace_size
      default: 4Gi
    - name: image_scanning_service_account_scanner
      default: scanner
    - name: image_scanning_service_account_publisher
      default: publisher
    - name: image_scanning_active_keychains
      default: []
    # - name: trivy_db_repository
    #   default: ghcr.io/aquasecurity/trivy-db
    # - name: trivy_java_db_repository
    #   default: ghcr.io/aquasecurity/trivy-java-db
    # - name: registry
    #   default:
    #     server: fmk.nexus-ci.onefiserv.net
    #     repository: platform/tap/workloads

  ytt: |
    #@ load("@ytt:data", "data")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def scanResultsLocation():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace,
    #@      "scan-results",
    #@    ])
    #@   ]) + ":" + data.values.workload.metadata.uid
    #@ end

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def maven_param(key):
    #@   if not key in data.values.params["maven"]:
    #@     return None
    #@   end
    #@   return data.values.params["maven"][key]
    #@ end

    #@ def correlationId():
    #@   if hasattr(data.values.workload, "annotations") and hasattr(data.values.workload.annotations, "apps.tanzu.vmware.com/correlationid"):
    #@     return data.values.workload.annotations["apps.tanzu.vmware.com/correlationid"]
    #@   end
    #@   if not hasattr(data.values.workload.spec, "source"):
    #@     return ""
    #@   end
    #@   url = ""
    #@   if hasattr(data.values.workload.spec.source, "git"):
    #@     url = data.values.workload.spec.source.git.url
    #@   end
    #@   if hasattr(data.values.workload.spec.source, "image"):
    #@     url = data.values.workload.spec.source.image.split("@")[0]
    #@   end
    #@   if param("maven"):
    #@     url = param("maven_repository_url") + "/" + maven_param("groupId").replace(".", "/") + "/" + maven_param("artifactId")
    #@   end
    #@   return url + "?sub_path=" + getattr(data.values.workload.spec.source, "subPath", "/")
    #@ end

    ---
    apiVersion: app-scanning.apps.tanzu.vmware.com/v1alpha1
    kind: ImageVulnerabilityScan
    metadata:
      labels: #@ merge_labels({ "app.kubernetes.io/component": "image-scan" })
      annotations:
        apps.tanzu.vmware.com/correlationid: #@ correlationId()
        app-scanning.apps.tanzu.vmware.com/scanner-name: Wiz                                                    
      generateName: #@ data.values.workload.metadata.name + "-wiz-scan-"
    spec:
      image: #@ data.values.image
      activeKeychains: #@ data.values.params.image_scanning_active_keychains
      scanResults:
        location: #@ scanResultsLocation()
      workspace:
        size: #@ data.values.params.image_scanning_workspace_size
      serviceAccountNames:
        scanner: #@ data.values.params.image_scanning_service_account_scanner
        publisher: #@ data.values.params.image_scanning_service_account_publisher
      steps:
      - name: wiz-generate-report
        image: fmk.nexus.onefiserv.net/fmk/ext-tools/fmk-dind:FMK-08-16-23
        securityContext:
          privileged: true
          runAsUser: 0
        env:
        - name: WIZ_CLIENT_ID
          value: ....
        - name: WIZ_CLIENT_SECRET
          value: ....
        - name: WIZ_POLICY
          value: wiz-lab1-vulscan-policy
        script: |-
          echo ############################################################
          echo Initializing container
          dockerd >/dev/null 2>&1 &
          until docker info >/dev/null; do sleep 10; done
          echo Docker ready
          curl -s -o wizcli https://wizcli.app.wiz.io/wizcli
          chmod +x wizcli
          echo Wiz ready
          echo Pulling $(params.image)
          docker pull $(params.image)
          echo Performing Wiz scan
          ./wizcli auth --id $WIZ_CLIENT_ID --secret $WIZ_CLIENT_SECRET
          ./wizcli docker scan --image $(params.image) -p $WIZ_POLICY --detailed
          echo Completed
          